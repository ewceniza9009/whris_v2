@model whris_v2.Models.MstEmployee

@{
    ViewBag.Title = "Employee Detail";
}

<style>
    .cmd-buttons {
        margin-left: 10px;
        width: 90px;
    }

    .row-padding {
        padding-top: 5px;
    }

    .input-width-sm {
        width: 100px;
    }

    .input-width-md {
        width: 180px;
    }

    .input-width-lg {
        width: 500px;
    }

    .ui-label {
        padding-top: 7px;
        padding-left: 0px;
    }
</style>

<div id="model">
    @using (Ajax.BeginForm("SaveEmployee", "MstEmployee", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "model", OnSuccess="ModelSaveSuccess" }))
    {
        <div class="row" style="margin-bottom: 20px; margin-top: -20px">
            <div class="col-md-6">
                <h5 style="margin-top: 5px;">Employee Detail</h5>
            </div>
            <div class="col-md-6">
                <button class="btn btn-danger cmd-buttons pull-right btn-labeled"
                        type="button"
                        onclick="Close_OnClick()">
                    <span class="btn-label">
                        <i class="fa fa-arrow-left"></i>
                    </span>Back
                </button>
                <button class="btn btn-outline-primary cmd-buttons pull-right btn-labeled"
                        type="button">
                    <span class="btn-label">
                        <i class="fa fa-print"></i>
                    </span>
                    Print
                </button>
                <button class="btn btn-primary cmd-buttons pull-right btn-labeled"
                        type="button">
                    <span class="btn-label">
                        <i class="fa fa-pencil"></i>
                    </span>
                    Edit
                </button>
                <button class="btn btn-primary cmd-buttons pull-right btn-labeled"
                        type="submit">
                    <span class="btn-label">
                        <i class="fa fa-lock"></i>
                    </span>
                    Save
                </button>
            </div>
        </div>

        @Html.AntiForgeryToken()

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id, new { id = "IdMem" })

        <div class="row">
            <div class="col-md-6">
                <div class="form-group row">
                    @Html.LabelFor(model => model.IdNumber, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                    <div class="col-sm-9">
                        @Html.TextBoxFor(model => model.IdNumber, new { @class = "form-control input-width-sm", id = "IdNumberMem", placeholder = "Id Number", type = "text" })
                        @Html.ValidationMessageFor(model => model.IdNumber, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                    <div class="col-sm-9">
                        @Html.TextBoxFor(model => model.LastName, new { @class = "form-control input-width-md", id = "LastNameMem", placeholder = "Last Name", type = "text" })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                    <div class="col-sm-9">
                        @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control input-width-md", id = "FirstNameMem", placeholder = "First Name", type = "text" })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.MiddleName, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                    <div class="col-sm-9">
                        @Html.TextBoxFor(model => model.MiddleName, new { @class = "form-control input-width-md", id = "MiddleNameMem", placeholder = "Middle Name", type = "text" })
                        @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.ExtensionName, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                    <div class="col-sm-9">
                        @Html.TextBoxFor(model => model.ExtensionName, new { @class = "form-control input-width-sm", id = "ExtensionNameMem", placeholder = "Ext. Name", type = "text" })
                        @Html.ValidationMessageFor(model => model.ExtensionName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.FullName, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                    <div class="col-sm-9">
                        @Html.TextBoxFor(model => model.FullName, new { @class = "form-control input-width-lg", id = "FullNameMem", placeholder = "Full Name", type = "text" })
                        @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group row">
                    @Html.LabelFor(model => model.BiometricIdNumber, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                    <div class="col-sm-9">
                        @Html.TextBoxFor(model => model.BiometricIdNumber, new { @class = "form-control input-width-sm", id = "BiometricIdNumberMem", placeholder = "BiometricId Number", type = "text" })
                        @Html.ValidationMessageFor(model => model.BiometricIdNumber, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.DateHired, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                    <div class="col-sm-9">
                        @Html.EditorFor(model => model.DateHired, new { @class = "form-control input-width-md", id = "DateHiredMem", placeholder = "Date Hired" })
                        @Html.ValidationMessageFor(model => model.DateHired, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.DateResigned, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                    <div class="col-sm-9">
                        @Html.EditorFor(model => model.DateResigned, new { @class = "form-control input-width-md", id = "DateResignedMem", placeholder = "Date Resigned" })
                        @Html.ValidationMessageFor(model => model.DateResigned, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.IsLocked, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                    <div class="col-sm-9">
                        @Html.CheckBoxFor(model => model.IsLocked, new { @class = "form-check-input", id = "IsLockedMem", disabled = "disabled", style = "margin-left: 5px; margin-top: 10px" })
                        @Html.ValidationMessageFor(model => model.IsLocked, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <ul class="nav nav-pills" style="margin-top: 20px">
            <li class="nav-item"><a class="nav-link active" href="#tab_1" data-toggle="tab">General Information</a></li>
            <li class="nav-item"><a class="nav-link" href="#tab_2" data-toggle="tab">Payroll Information</a></li>
            <li class="nav-item"><a class="nav-link" href="#tab_3" data-toggle="tab">Memo</a></li>
            <li class="nav-item"><a class="nav-link" href="#tab_4" data-toggle="tab">Shift Code</a></li>
            <li class="nav-item pull-right"><a class="nav-link"><i class="fa fa-gear"></i></a></li>
        </ul>

        <div class="tab-content" style=" background-color: #476f7514; border-radius: 5px; padding-left: 10px; padding-top: 5px;">
            <div class="tab-pane active" id="tab_1">
                <div class="row" style="margin-top: 10px">
                    <div class="col-md-6">
                        <div class="form-group row">
                            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @Html.TextBoxFor(model => model.Address, new { @class = "form-control input-width-lg", id = "AddressMem", placeholder = "Address", type = "text" })
                                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.ZipCodeId, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().MultiColumnComboBox()
                                   .Name("ZipCodeId")
                                   .DataTextField("ZipCode")
                                   .DataValueField("Id")
                                   .Filter("contains")
                                   .FilterFields(new string[] { "ZipCode", "Location" })
                                   .Columns(col =>
                                   {
                                       col.Add().Field("ZipCode").Title("ZipCode");
                                       col.Add().Field("Location").Title("Location");

                                   })
                                   .DropDownWidth(500)
                                   .Height(400)
                                   .DataSource(
                                       source =>
                                       {
                                           source.Read("CmbZipCode", "MstEmployee");
                                       }

                                ))
                                @Html.ValidationMessageFor(model => model.ZipCodeId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @Html.TextBoxFor(model => model.PhoneNumber, new { @class = "form-control input-width-md", id = "PhoneNumberMem", placeholder = "Phone Number", type = "text" })
                                @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.CellphoneNumber, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @Html.TextBoxFor(model => model.CellphoneNumber, new { @class = "form-control input-width-md", id = "CellphoneNumberMem", placeholder = "Cel Number", type = "text" })
                                @Html.ValidationMessageFor(model => model.CellphoneNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.EmailAddress, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @Html.TextBoxFor(model => model.EmailAddress, new { @class = "form-control input-width-md", id = "EmailAddressMem", placeholder = "Email address" })
                                @Html.ValidationMessageFor(model => model.EmailAddress, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.DateOfBirth, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @Html.EditorFor(model => model.DateOfBirth, new { @class = "form-control input-width-md", id = "DateOfBirthMem", placeholder = "Birth Date" })
                                @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.PlaceOfBirth, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @Html.TextBoxFor(model => model.PlaceOfBirth, new { @class = "form-control input-width", id = "PlaceOfBirthMem", placeholder = "Place of Birth", type = "text" })
                                @Html.ValidationMessageFor(model => model.PlaceOfBirth, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.PlaceOfBirthZipCodeId, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().MultiColumnComboBox()
                                   .Name("PlaceOfBirthZipCodeId")
                                   .DataTextField("ZipCode")
                                   .DataValueField("Id")
                                   .Placeholder("Place of Birth zip code")
                                   .Filter("contains")
                                   .FilterFields(new string[] { "ZipCode", "Location" })
                                   .Columns(col =>
                                   {
                                       col.Add().Field("ZipCode").Title("ZipCode");
                                       col.Add().Field("Location").Title("Location");

                                   })
                                   .DropDownWidth(500)
                                   .Height(400)
                                   .DataSource(
                                       source =>
                                       {
                                           source.Read("CmbPlaceOfBirthZipCode", "MstEmployee");
                                       }

                                ))
                                @Html.ValidationMessageFor(model => model.ZipCodeId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.Sex, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().ComboBoxFor(model => model.Sex)
                                   .Placeholder("Sex")
                                   .DataTextField("Sex")
                                   .DataValueField("Sex")
                                   .DataSource(source =>
                                           {
                                       source.Read(read =>
                                       {
                                           read.Action("CmbSex", "MstEmployee");
                                       });
                                   })
                                )
                                @Html.ValidationMessageFor(model => model.Sex, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.CivilStatus, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().ComboBoxFor(model => model.CivilStatus)
                                   .Placeholder("Civil Status")
                                   .DataTextField("CivilStatus")
                                   .DataValueField("CivilStatus")
                                   .DataSource(source =>
                                           {
                                       source.Read(read =>
                                       {
                                           read.Action("CmbCivilStatus", "MstEmployee");
                                       });
                                   })
                                )
                                @Html.ValidationMessageFor(model => model.CivilStatus, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.CitizenshipId, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().ComboBoxFor(model => model.CitizenshipId)
                                   .Placeholder("Civil Status")
                                   .DataTextField("Citizenship")
                                   .DataValueField("Id")
                                   .DataSource(source =>
                                           {
                                       source.Read(read =>
                                       {
                                           read.Action("CmbCitizenship", "MstEmployee");
                                       });
                                   })
                                )
                                @Html.ValidationMessageFor(model => model.CitizenshipId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.ReligionId, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().ComboBoxFor(model => model.ReligionId)
                                   .Placeholder("Religion")
                                   .DataTextField("Religion")
                                   .DataValueField("Id")
                                   .DataSource(source =>
                                           {
                                       source.Read(read =>
                                       {
                                           read.Action("CmbReligion", "MstEmployee");
                                       });
                                   })
                                )
                                @Html.ValidationMessageFor(model => model.ReligionId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.Height, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().NumericTextBoxFor(model => model.Height)
                                 .Format("n2")
                                 .HtmlAttributes(new { id = "HeightMem", placeholder = "Height", style = "width: 35%; text-align: right" })
                                )
                                @Html.ValidationMessageFor(model => model.Height, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.Weight, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().NumericTextBoxFor(model => model.Weight)
                                 .Format("n2")
                                 .HtmlAttributes(new { id = "WeightMem", placeholder = "Weight", style = "width: 35%; text-align: right" })
                                )
                                @Html.ValidationMessageFor(model => model.Weight, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="tab-pane" id="tab_2">
                <div class="row" style="margin-top: 10px">
                    <div class="col-md-6">
                        <div class="form-group row">
                            @Html.LabelFor(model => model.GSISNumber, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @Html.TextBoxFor(model => model.GSISNumber, new { @class = "form-control input-width-sm", id = "GSISNumberMem", placeholder = "GSIS No.", type = "text" })
                                @Html.ValidationMessageFor(model => model.GSISNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.SSSNumber, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @Html.TextBoxFor(model => model.SSSNumber, new { @class = "form-control input-width-md", id = "SSSNumberMem", placeholder = "SSS No.", type = "text" })
                                @Html.ValidationMessageFor(model => model.SSSNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.SSSAddOn, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().NumericTextBoxFor(model => model.SSSAddOn)
                                 .Format("n2")
                                 .HtmlAttributes(new { id = "SSSAddOnMem", placeholder = "SSS AddOn", style = "width: 35%; text-align: right" })
                                )
                                @Html.ValidationMessageFor(model => model.SSSAddOn, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.SSSIsGrossAmount, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @Html.CheckBoxFor(model => model.SSSIsGrossAmount, new { @class = "form-check-input", id = "SSSIsGrossAmountMem", style = "margin-left: 5px; margin-top: 10px" })
                                @Html.ValidationMessageFor(model => model.SSSIsGrossAmount, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.HDMFNumber, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @Html.TextBoxFor(model => model.HDMFNumber, new { @class = "form-control input-width-md", id = "HDMFNumberMem", placeholder = "HDMF No.", type = "text" })
                                @Html.ValidationMessageFor(model => model.HDMFNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.HDMFType, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().ComboBoxFor(model => model.HDMFType)
                                   .Placeholder("HDMF Type")
                                   .DataTextField("HDMFType")
                                   .DataValueField("HDMFType")
                                   .DataSource(source =>
                                           {
                                       source.Read(read =>
                                       {
                                           read.Action("CmbHDMFType", "MstEmployee");
                                       });
                                   })
                                )
                                @Html.ValidationMessageFor(model => model.HDMFType, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.HDMFAddOn, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().NumericTextBoxFor(model => model.HDMFAddOn)
                                 .Format("n2")
                                 .HtmlAttributes(new { id = "HDMFAddOnMem", placeholder = "HDMF AddOn", style = "width: 35%; text-align: right" })
                                )
                                @Html.ValidationMessageFor(model => model.HDMFAddOn, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.PHICNumber, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @Html.TextBoxFor(model => model.PHICNumber, new { @class = "form-control input-width-md", id = "PHICNumberMem", placeholder = "PHIC No.", type = "text" })
                                @Html.ValidationMessageFor(model => model.PHICNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.TIN, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @Html.TextBoxFor(model => model.TIN, new { @class = "form-control input-width-lg", id = "TINMem", placeholder = "TIN", type = "text" })
                                @Html.ValidationMessageFor(model => model.TIN, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.TaxCodeId, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().ComboBoxFor(model => model.TaxCodeId)
                                   .Placeholder("TaxCode")
                                   .DataTextField("TaxCode")
                                   .DataValueField("Id")
                                   .DataSource(source =>
                                           {
                                       source.Read(read =>
                                       {
                                           read.Action("CmbTaxCode", "MstEmployee");
                                       });
                                   })
                                )
                                @Html.ValidationMessageFor(model => model.TaxCodeId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.TaxTable, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().ComboBoxFor(model => model.TaxTable)
                                   .Placeholder("Tax Table")
                                   .DataTextField("TaxTable")
                                   .DataValueField("TaxTable")
                                   .DataSource(source =>
                                           {
                                       source.Read(read =>
                                       {
                                           read.Action("CmbTaxTable", "MstEmployee");
                                       });
                                   })
                                )
                                @Html.ValidationMessageFor(model => model.TaxTable, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.ATMAccountNumber, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @Html.TextBoxFor(model => model.ATMAccountNumber, new { @class = "form-control input-width-md", id = "ATMAccountNumberMem", placeholder = "ATM No.", type = "text" })
                                @Html.ValidationMessageFor(model => model.ATMAccountNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.CompanyId, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().ComboBoxFor(model => model.CompanyId)
                                   .Placeholder("Company")
                                   .DataTextField("Company")
                                   .DataValueField("Id")
                                   .DataSource(source =>
                                           {
                                       source.Read(read =>
                                       {
                                           read.Action("CmbCompany", "MstEmployee");
                                       });
                                   })
                                )
                                @Html.ValidationMessageFor(model => model.CompanyId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.BranchId, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().ComboBoxFor(model => model.BranchId)
                                   .Placeholder("Branch")
                                   .DataTextField("Branch")
                                   .DataValueField("Id")
                                   .DataSource(source =>
                                           {
                                       source.Read(read =>
                                       {
                                           read.Action("CmbBranch", "MstEmployee");
                                       });
                                   })
                                )
                                @Html.ValidationMessageFor(model => model.BranchId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.DepartmentId, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().ComboBoxFor(model => model.DepartmentId)
                                   .Placeholder("Department")
                                   .DataTextField("Department")
                                   .DataValueField("Id")
                                   .DataSource(source =>
                                           {
                                       source.Read(read =>
                                       {
                                           read.Action("CmbDepartment", "MstEmployee");
                                       });
                                   })
                                )
                                @Html.ValidationMessageFor(model => model.DepartmentId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.PositionId, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().ComboBoxFor(model => model.PositionId)
                                   .Placeholder("Position")
                                   .DataTextField("Position")
                                   .DataValueField("Id")
                                   .DataSource(source =>
                                           {
                                       source.Read(read =>
                                       {
                                           read.Action("CmbPosition", "MstEmployee");
                                       });
                                   })
                                )
                                @Html.ValidationMessageFor(model => model.PositionId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.DivisionId, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().ComboBoxFor(model => model.DivisionId)
                                   .Placeholder("Division")
                                   .DataTextField("Division")
                                   .DataValueField("Id")
                                   .DataSource(source =>
                                           {
                                       source.Read(read =>
                                       {
                                           read.Action("CmbDivision", "MstEmployee");
                                       });
                                   })
                                )
                                @Html.ValidationMessageFor(model => model.DivisionId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group row">
                            @Html.LabelFor(model => model.PayrollGroupId, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().ComboBoxFor(model => model.PayrollGroupId)
                                   .Placeholder("Payroll Group")
                                   .DataTextField("PayrollGroup")
                                   .DataValueField("Id")
                                   .DataSource(source =>
                                           {
                                       source.Read(read =>
                                       {
                                           read.Action("CmbPayrollGroup", "MstEmployee");
                                       });
                                   })
                                )
                                @Html.ValidationMessageFor(model => model.PayrollGroupId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.PayrollTypeId, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().ComboBoxFor(model => model.PayrollTypeId)
                                   .Placeholder("Payroll Type")
                                   .DataTextField("PayrollType")
                                   .DataValueField("Id")
                                   .DataSource(source =>
                                           {
                                       source.Read(read =>
                                       {
                                           read.Action("CmbPayrollType", "MstEmployee");
                                       });
                                   })
                                )
                                @Html.ValidationMessageFor(model => model.PayrollTypeId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.AccountId, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().ComboBoxFor(model => model.AccountId)
                                   .Placeholder("Account")
                                   .DataTextField("Account")
                                   .DataValueField("Id")
                                   .DataSource(source =>
                                           {
                                       source.Read(read =>
                                       {
                                           read.Action("CmbGLAccount", "MstEmployee");
                                       });
                                   })
                                )
                                @Html.ValidationMessageFor(model => model.AccountId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.FixNumberOfDays, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @Html.TextBoxFor(model => model.FixNumberOfDays, new { @class = "form-control input-width-sm", id = "FixNumberOfDaysMem", placeholder = "Fix No. of days", type = "number", step = "1", style = "text-align: right" })
                                @Html.ValidationMessageFor(model => model.FixNumberOfDays, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.FixNumberOfHours, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @Html.TextBoxFor(model => model.FixNumberOfHours, new { @class = "form-control input-width-sm", id = "FixNumberOfHoursMem", placeholder = "Fix No. of hours", type = "number", step = "1", style = "text-align: right" })
                                @Html.ValidationMessageFor(model => model.FixNumberOfHours, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.MonthlyRate, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().NumericTextBoxFor(model => model.MonthlyRate)
                                  .Format("n2")
                                  .HtmlAttributes(new { id = "MonthlyRateMem", placeholder = "Monthly rate", style = "width: 35%; text-align: right" })
                                  )
                                @Html.ValidationMessageFor(model => model.MonthlyRate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.PayrollRate, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().NumericTextBoxFor(model => model.PayrollRate)
                                  .Format("n2")
                                  .HtmlAttributes(new { id = "PayrollRateMem", placeholder = "Payroll rate", style = "width: 35%; text-align: right" })
                                )
                                @Html.ValidationMessageFor(model => model.PayrollRate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.DailyRate, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().NumericTextBoxFor(model => model.DailyRate)
                                  .Format("n2")
                                  .HtmlAttributes(new { id = "DailyRateMem", placeholder = "Daily rate", style = "width: 35%; text-align: right" })
                                )
                                @Html.ValidationMessageFor(model => model.DailyRate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.AbsentDailyRate, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().NumericTextBoxFor(model => model.AbsentDailyRate)
                                  .Format("n2")
                                  .HtmlAttributes(new { id = "AbsentDailyRateMem", placeholder = "Absent daily rate", style = "width: 35%; text-align: right" })
                                )
                                @Html.ValidationMessageFor(model => model.AbsentDailyRate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.HourlyRate, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().NumericTextBoxFor(model => model.HourlyRate)
                                  .Format("n2")
                                  .HtmlAttributes(new { id = "HourlyRateMem", placeholder = "Hourly rate", style = "width: 35%; text-align: right" })
                                )
                                @Html.ValidationMessageFor(model => model.HourlyRate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.NightHourlyRate, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().NumericTextBoxFor(model => model.NightHourlyRate)
                                  .Format("n2")
                                  .HtmlAttributes(new { id = "NightHourlyRateMem", placeholder = "Night hourly rate", style = "width: 35%; text-align: right" })
                                )
                                @Html.ValidationMessageFor(model => model.NightHourlyRate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.OvertimeHourlyRate, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().NumericTextBoxFor(model => model.OvertimeHourlyRate)
                                  .Format("n2")
                                  .HtmlAttributes(new { id = "OvertimeHourlyRateMem", placeholder = "Overtime hourly rate", style = "width: 35%; text-align: right" })
                                )
                                @Html.ValidationMessageFor(model => model.OvertimeHourlyRate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.OvertimeNightHourlyRate, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().NumericTextBoxFor(model => model.OvertimeNightHourlyRate)
                                  .Format("n2")
                                  .HtmlAttributes(new { id = "OvertimeNightHourlyRateMem", placeholder = "Overtime night hourly rate", style = "width: 35%; text-align: right" })
                                )
                                @Html.ValidationMessageFor(model => model.OvertimeNightHourlyRate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.TardyHourlyRate, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().NumericTextBoxFor(model => model.TardyHourlyRate)
                                 .Format("n2")
                                 .HtmlAttributes(new { id = "TardyHourlyRateRateMem", placeholder = "Tardy hourly rate", style = "width: 35%; text-align: right" })
                                )
                                @Html.ValidationMessageFor(model => model.TardyHourlyRate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.ShiftCodeId, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @(Html.Kendo().ComboBoxFor(model => model.ShiftCodeId)
                                   .Placeholder("Shift code")
                                   .DataTextField("ShiftCode")
                                   .DataValueField("Id")
                                   .DataSource(source =>
                                           {
                                       source.Read(read =>
                                       {
                                           read.Action("CmbShiftCode", "MstEmployee");
                                       });
                                   })
                                )
                                @Html.ValidationMessageFor(model => model.ShiftCodeId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="tab-pane" id="tab_3">
                <div class="row" style="padding: 10px 10px 10px 0px">
                    <div class="col-md-12">
                        <div class="row" style="padding-left: 15px; padding-bottom: 5px">
                            <button class="btn btn-primary pull-left btn-labeled"
                                    type="button"
                                    onclick="AddEmployeeMemo()">
                                <span class="btn-label">
                                    <i class="fa fa-plus"></i>
                                </span>Add Memo
                            </button>
                        </div>

                        <div id="MstEmployeeMemoSF1">
                        </div>
                    </div>
                </div>
            </div>

            <div class="tab-pane" id="tab_4">
                <div class="row" style="padding: 10px 10px 10px 0px">
                    <div class="col-md-12">
                        <div id="MstEmployeeShiftCodeSF2">
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="modal fade" id="memoModal" role="dialog" aria-labelledby="Memo Detail" aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h5 class="modal-title pull-left" id="myModalLabel">Memo Detail</h5>
                            </div>
                            <div class="col-md-6">
                                <button class="btn btn-danger cmd-buttons pull-right btn-labeled"
                                        type="button"
                                        data-dismiss="modal">
                                    <span class="btn-label">
                                        <i class="fa fa-arrow-left"></i>
                                    </span>Back
                                </button>
                                <button class="btn btn-outline-primary cmd-buttons pull-right btn-labeled"
                                        type="button">
                                    <span class="btn-label">
                                        <i class="fa fa-print"></i>
                                    </span>
                                    Print
                                </button>
                                <button class="btn btn-primary cmd-buttons pull-right btn-labeled"
                                        type="button"
                                        data-dismiss="modal"
                                        onclick="SaveEmployeeMemo()">
                                    <span class="btn-label">
                                        <i class="fa fa-lock"></i>
                                    </span>
                                    Save
                                </button>
                            </div>
                        </div>
                        <div class="modal-body">
                            <div class="container-fluid">
                                <div class="row">
                                    <div class="col-md-4">

                                        @(Html.Kendo().DatePicker()
                                          .Name("MemoDateMem")
                                          .HtmlAttributes(new { id = "MemoDateMem", style = "width: 100%", placeholder = "Date", title = "datepicker" })
                                        )
                                    </div>
                                    <div class="col-md-8"><input id="SubjectMem" type="text" class="form-control pull-right" placeholder="Subject" value="" /></div>
                                </div>
                                <div class="row">
                                    <div class="col-md-12" style="padding-top: 10px">
                                        <textarea id="ContentMem" class="form-control" style="height: 250px"></textarea>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<script src="~/Scripts/jquery.dirtyforms.min.js"></script>

<script>
    var empData = {};
    var empId = 0;
    var shiftCodes = null;

    //Employe begin
    function Close_OnClick() {
        location.href = "@Url.Action("Index","MstEmployee")";
    }

    function ModelSaveSuccess(data)
    {
        toastr["success"]("Success!")

        toastr.options = {
          "closeButton": false,
          "debug": false,
          "newestOnTop": false,
          "progressBar": true,
          "positionClass": "toast-top-right",
          "preventDuplicates": false,
          "onclick": null,
          "showDuration": "300",
          "hideDuration": "1000",
          "timeOut": "5000",
          "extendedTimeOut": "1000",
          "showEasing": "swing",
          "hideEasing": "linear",
          "showMethod": "fadeIn",
          "hideMethod": "fadeOut"
        }
    }

    //Events begin
    $('#LastNameMem').on('input',function(e){
        ChangeFullName();
    });

    $('#FirstNameMem').on('input',function(e){
        ChangeFullName();
    });

    $('#MiddleNameMem').on('input',function(e){
        ChangeFullName();
    });

    $('#ExtensionNameMem').on('input',function(e){
        ChangeFullName();
    });

    function ChangeFullName()
    {
        $("#FullNameMem").val($("#ExtensionNameMem").val() + " " + $("#LastNameMem").val() + ", " + $("#FirstNameMem").val() + " " + $("#MiddleNameMem").val());
    }
    //Events end

    //Employee end

    //Employee Memo begin
    function ShowEmployeeMemo(e) {
        var memo = {};
        var tr = $(e.target).closest("tr");
        var item = this.dataItem(tr);

        $.ajax({
            url: "@Url.Action("ReadEmployeeMemoDetail", "MstEmployee")",
            type: "GET",
            async: false,
            contentType: "application/json",
            data: {
                'modelId': item.Id
            },
            success: function (data) {
                memo = data;
            }
        });

        $("#IdMem").val(item.Id)
        $("#MemoDateMem").val(ParseDate(memo.MemoDate))
        $("#SubjectMem").val(memo.MemoSubject)
        $("#ContentMem").val(memo.MemoContent)

        $("#memoModal").modal("show");
    }

    function AddEmployeeMemo()
    {
        var memo = {};
        var newEmpId = 0;
        empId = GetParameterByName('modelId');

        if (empId == 0)
        {
            alert("Windows will now reload for new employee!");

            var model = @Html.Raw(Json.Encode(Model));

            model.DateHired = ParseDate(model.DateHired);
            model.DateResigned = ParseDate(model.DateResigned);
            model.DateOfBirth = ParseDate(model.DateOfBirth);

            $.ajax({
                url: "@Url.Action("GetEmployee", "MstEmployee")",
                type: "POST",
                dataType: "json",
                data: {
                    'model': model
                }
                ,
                success: function (data) {
                    newEmpId = data;

                    var page = "@Url.Action("MstEmployeeDetail", "MstEmployee")" + "?modelId=" + empId;
                    var newPage = "@Url.Action("MstEmployeeDetail", "MstEmployee")" + "?modelId=" + newEmpId;

                    ChangeUrl(page, newPage);

                    empId = newEmpId;

                    $("#MstEmployeeMemoSF1").data("kendoGrid").dataSource.options.transport.read.url = "@Url.Action("Read", "MstEmployee")?modelFilterId=" + empId;
                    $("#MstEmployeeMemoSF1").data("kendoGrid").dataSource.read();
                }
            }); 
        }

        $.ajax({
            url: "@Url.Action("ReadEmployeeMemoDetail", "MstEmployee")",
            type: "GET",
            async: false,
            contentType: "application/json",
            data: {
                'modelId': 0
            },
            success: function (data) {
                memo = data;
            }
        });

        $("#IdMem").val(0)
        $("#MemoDateMem").val(ParseDate(memo.MemoDate))
        $("#SubjectMem").val(memo.MemoSubject)
        $("#ContentMem").val(memo.MemoContent)

        $("#memoModal").modal("show");
    }

    function SaveEmployeeMemo()
    {
        var memo = {};

        memo.Id =  $("#IdMem").val();
        memo.EmployeeId = empId;
        memo.MemoDate = $("#MemoDateMem").val();
        memo.MemoSubject = $("#SubjectMem").val();
        memo.MemoContent = $("#ContentMem").val();

        $.ajax({
            url: "@Url.Action("SaveEmployeeMemoDetail", "MstEmployee")",
            type: "POST",
            dataType: "json",
            data: {
                'model': memo
            },
            success: function (data) {
                memo = data;
            }
        });

        $("#MstEmployeeMemoSF1").data("kendoGrid").dataSource.read();
    }

    function DeleteEmployeeMemo(e)
    {
        var tr = $(e.target).closest("tr");
        var item = this.dataItem(tr);

        $.ajax({
            url: "@Url.Action("DeleteEmployeeMemoDetail", "MstEmployee")",
            type: "DELETE",
            dataType: "json",
            data: {
                'modelId': item.Id
            },
            success: function (data) {
                memo = data;
            }
        });

        $("#MstEmployeeMemoSF1").data("kendoGrid").dataSource.read();
    }
    //Employee Memo end

    //Shift Codes begin
    function CmbShiftCode(container, options) {
        $('<input required name="' + options.field + '"/>')
            .appendTo(container)
            .kendoDropDownList({
                autoBind: false,
                dataTextField: "ShiftCode",
                dataValueField: "Id",
                dataSource: shiftCodes
            });
    }

    function GetShiftCodes(shiftCodeId) {
        for (var idx = 0, length = shiftCodes.length; idx < length; idx++) {
            if (shiftCodes[idx].Id === shiftCodeId) {
                return shiftCodes[idx].ShiftCode;
            }
        }

        return null;
    }

    function ReloadPage()
    {
        var newEmpId = 0;
        empId = GetParameterByName('modelId');

        if (empId == 0)
        {
            alert("Windows will now reload for new employee!");

            var model = @Html.Raw(Json.Encode(Model));

            model.DateHired = ParseDate(model.DateHired);
            model.DateResigned = ParseDate(model.DateResigned);
            model.DateOfBirth = ParseDate(model.DateOfBirth);

            $.ajax({
                url: "@Url.Action("GetEmployee", "MstEmployee")",
                type: "POST",
                dataType: "json",
                data: {
                    'model': model
                },
                success: function (data) {
                    newEmpId = data;

                    var page = "@Url.Action("MstEmployeeDetail", "MstEmployee")" + "?modelId=" + empId;
                    var newPage = "@Url.Action("MstEmployeeDetail", "MstEmployee")" + "?modelId=" + newEmpId;

                    ChangeUrl(page, newPage);

                    empId = newEmpId;

                    $("#MstEmployeeShiftCodeSF2").data("kendoGrid").setDataSource(ShifCodeDataSource(empId));
                    $("#MstEmployeeShiftCodeSF2").data("kendoGrid").dataSource.read();
                },
                error: function (xhr, status, error) {
                    newEmpId = xhr.responseText;

                    var page = "@Url.Action("MstEmployeeDetail", "MstEmployee")" + "?modelId=" + empId;
                    var newPage = "@Url.Action("MstEmployeeDetail", "MstEmployee")" + "?modelId=" + newEmpId;

                    ChangeUrl(page, newPage);

                    empId = newEmpId;

                    $("#MstEmployeeShiftCodeSF2").data("kendoGrid").setDataSource(ShifCodeDataSource(empId));
                    $("#MstEmployeeShiftCodeSF2").data("kendoGrid").dataSource.read();
                }
            });
        }
    }

    function ShifCodeDataSource(empId)
    {
        var dataSource = new kendo.data.DataSource({
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true,
            pageSize: 5,
            schema: {
                data: "Data",
                total: "Total",
                model: {
                    id: "Id",
                    fields: {
                        Id: { editable: false },
                        EmployeeId: { editable: false },
                        ShiftCodeId: { editable: true }
                    }
                }
            },
            batch: true,
            transport:  {
                create: {
                    url: "@Url.Action("CreateShiftCode", "MstEmployee")?modelFilterId=" + empId,
                    type: "POST"
                },
                read: {
                    url: "@Url.Action("ReadShiftCodes", "MstEmployee")?modelFilterId=" + empId,
                    contentType: "application/json",
                    type: "POST"
                },
                update: {
                    url:"@Url.Action("UpdateShiftCode", "MstEmployee")?modelFilterId=" + empId,
                    type: "POST"
                },
                destroy: {
                    url: "@Url.Action("DestroyShiftCode", "MstEmployee")?modelFilterId=" + empId,
                    type: "POST"
                },
                parameterMap: function (data, operation)
                {
                    if (operation !== "read") {
                        var result = {};

                        for (var i = 0; i < data.models.length; i++) {
                            var empLineShiftCodes = data.models[i];

                            for (var member in empLineShiftCodes) {
                                if (empLineShiftCodes.hasOwnProperty(member)) {
                                    result["models[" + i + "]." + member] = empLineShiftCodes[member];
                                }
                            }
                        }

                        return result;
                    }
                    else
                    {
                        return JSON.stringify(data);
                    }
                }
            }
        });

        return dataSource;
    }
    //Shift Codes end

    //Utis begin
    function ChangeUrl(page, url) {
        if (typeof (history.pushState) != "undefined") {
            var obj = { Page: page, Url: url };
            history.pushState(obj, obj.Page, obj.Url);
        } else {
            alert("Browser does not support HTML5.");
        }
    }

    function ParseDate(dt)
    {
        try
        {
            var milli = dt.replace(/\/Date\((-?\d+)\)\//, '$1');
            var d = new Date(parseInt(milli));

            return d.toLocaleDateString();
        }
        catch (err)
        {
            return null;
        }
    }

    function GetParameterByName(name, url) {
        if (!url) url = window.location.href;
        name = name.replace(/[\[\]]/g, '\\$&');
        var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, ' '));
    }
    //Utils end

    $('form').dirtyForms();

    $(document).ready(function () {
        var empId = GetParameterByName('modelId');

        //Employee Memo
        $("#MstEmployeeMemoSF1").kendoGrid({
            columns: [
                {
                    command: {
                        text: "Detail",
                        click: ShowEmployeeMemo,
                        className: "k-primary"
                    },
                    title: "Detail",
                    width: 100

                },
                {
                    command: {
                        text: "Delete",
                        click: DeleteEmployeeMemo,
                        attributes: {
                            "class": "btn btn-danger"
                        }
                    },
                    title: "Delete",
                    width: 100

                },
                {
                    hidden: true,
                    field: "Id",
                    title: "Id",
                    width: 80
                },
                { width: "100px", field: "MemoDate", title: "Memo Date", format: "{0:MM/dd/yyyy}"},
                { width: "150px", field: "MemoSubject", title: "Memo Subject" },
                { width: "500px", field: "MemoContent", title: "Memo Content" }
            ],
            editable: false,
            pageable: true,
            sortable: true,
            filterable: true,
            dataSource: {
                serverPaging: true,
                serverFiltering: true,
                serverSorting: true,
                pageSize: 5,
                schema: {
                    data: "Data",
                    total: "Total",
                    model: {
                        id: "Id",
                        fields: {
                            Id: { editable: false },
                            EmployeeId: { editable: false },
                            MemoDate: { type: "date" },
                            MemoSubject: { type: "string" },
                            MemoContent: { type: "string" }
                        }
                    }
                },
                transport: {
                    read: {
                        url: "@Url.Action("Read", "MstEmployee")?modelFilterId=" + empId,
                        contentType: "application/json",
                        type: "POST"
                    },
                    parameterMap: function(data, operation) {
                        return JSON.stringify(data);
                    }
                }
            }
        });

        $("#MstEmployeeShiftCodeSF2").kendoGrid({
            columns: [
                {
                    width: "0px",
                    field: "Id",
                    title: "Id",
                    hidden: true
                },
                {
                    width: "0px",
                    field: "EmployeeId",
                    title: "EmployeeId",
                    hidden: true
                },
                {
                    width: "200px",
                    field: "ShiftCodeId",
                    title: "Shift Code",
                    editor: CmbShiftCode,
                    template: "#=GetShiftCodes(ShiftCodeId)#"
                },
                {
                    command: ["destroy"],
                    title: "&nbsp;",
                    width: "200px"
                }
            ],
            editable: true,
            pageable: true,
            sortable: true,
            filterable: true,
            toolbar: ["create", "save", "cancel"],
            dataBound:function(e){
              $('.k-grid-add').unbind("click");

              $('.k-grid-add').bind("click", function(){
                  ReloadPage();
              });
            },
            dataSource: ShifCodeDataSource(empId)
        });

        $.ajax({
            url: "@Url.Action("CmbLineShiftCode", "MstEmployee")",
            type: "GET",
            async: false,
            contentType: "application/json",
            success: function(data) {
                shiftCodes = data;
            }
        });
    });

    $(window).on('load', function () {
        var nodeList = document.getElementsByTagName("input");

        for(item in nodeList) {
            console.log(nodeList[item]);
        };
    });
</script>
