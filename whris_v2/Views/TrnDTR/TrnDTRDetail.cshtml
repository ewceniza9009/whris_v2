@model whris_v2.Models.TrnDTR

@{
    ViewBag.Title = "DTR Detail";
}

<style>
    .cmd-buttons {
        margin-left: 10px;
        width: 90px;
    }

    .row-padding {
        padding-top: 5px;
    }

    .input-width-sm {
        width: 100px;
    }

    .input-width-md {
        width: 180px;
    }

    .input-width-lg {
        width: 500px;
    }

    .ui-label {
        padding-top: 7px;
        padding-left: 0px;
    }

    #TrnDTRDetailSF1 {
        min-width: 1050px;
        width: 1090px;
    }

    .k-grid-header .k-header{
       text-align: center;
    }
</style>

<div id="model">
    @using (Ajax.BeginForm("", "", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "model", OnSuccess = "ModelSaveSuccess" }))
    {
        <div class="row" style="margin-bottom: 20px; margin-top: -20px">
            <div class="col-md-6">
                <h5 style="margin-top: 5px;">DTR Detail</h5>
            </div>
            <div class="col-md-6">
                <button class="btn btn-danger cmd-buttons pull-right btn-labeled"
                        type="button"
                        onclick="Close_OnClick()">
                    <span class="btn-label">
                        <i class="fa fa-arrow-left"></i>
                    </span>Back
                </button>
                <button class="btn btn-outline-primary cmd-buttons pull-right btn-labeled"
                        type="button">
                    <span class="btn-label">
                        <i class="fa fa-print"></i>
                    </span>
                    Print
                </button>
                <button class="btn btn-primary cmd-buttons pull-right btn-labeled"
                        type="button">
                    <span class="btn-label">
                        <i class="fa fa-pencil"></i>
                    </span>
                    Edit
                </button>
                <button class="btn btn-primary cmd-buttons pull-right btn-labeled"
                        type="submit">
                    <span class="btn-label">
                        <i class="fa fa-lock"></i>
                    </span>
                    Save
                </button>
            </div>
        </div>

        @Html.AntiForgeryToken()

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id, new { id = "IdMem" })

        <div class="row">
            <div class="col-md-6">
                <div class="form-group row">
                    @Html.LabelFor(model => model.PeriodId, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                    <div class="col-sm-9">
                        @(Html.Kendo().ComboBoxFor(model => model.PeriodId)
                           .Placeholder("Period")
                           .DataTextField("Period")
                           .DataValueField("Id")
                           .HtmlAttributes(new { style = "width: 120px;" })
                           .DataSource(source =>
                           {
                               source.Read(read =>
                               {
                                   read.Action("CmbPeriod", "TrnDTR");
                               });
                           })
                        )
                        @Html.ValidationMessageFor(model => model.PeriodId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.DTRNumber, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                    <div class="col-sm-9">
                        @Html.TextBoxFor(model => model.DTRNumber, new { @class = "form-control input-width-md", id = "DTRNumberMem", placeholder = "DTR Number", type = "text" })
                        @Html.ValidationMessageFor(model => model.DTRNumber, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.DTRDate, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                    <div class="col-sm-9">
                        @Html.EditorFor(model => model.DTRDate, new { @class = "form-control input-width-md", id = "DTRDateMem", placeholder = "DTR Date" })
                        @Html.ValidationMessageFor(model => model.DTRDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.PayrollGroupId, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                    <div class="col-sm-9">
                        @(Html.Kendo().ComboBoxFor(model => model.PayrollGroupId)
                           .Name("PayrollGroupIdMem")
                           .Placeholder("Payroll Group")
                           .DataTextField("PayrollGroup")
                           .DataValueField("Id")
                           .AutoWidth(true)
                           .HtmlAttributes(new { style = "width: 280px;" })
                           .DataSource(source =>
                                   {
                               source.Read(read =>
                               {
                                   read.Action("CmbPayrollGroup", "TrnDTR");
                               });
                           })
                        )
                        @Html.ValidationMessageFor(model => model.PayrollGroupId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.DateStart, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                    <div class="col-sm-9">
                        @Html.EditorFor(model => model.DateStart, new { @class = "form-control input-width-md", id = "DateStartMem", placeholder = "Date Start" })
                        @Html.ValidationMessageFor(model => model.DateStart, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.DateEnd, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                    <div class="col-sm-9">
                        @Html.EditorFor(model => model.DateEnd, new { @class = "form-control input-width-md", id = "DateEndMem", placeholder = "Date Start" })
                        @Html.ValidationMessageFor(model => model.DateEnd, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                    <div class="col-sm-9">
                        @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control input-width-lg", id = "RemarksMem", placeholder = "Remarks", type = "text" })
                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group row">
                    @Html.LabelFor(model => model.OvertTimeId, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                    <div class="col-sm-9">
                        @(Html.Kendo().ComboBoxFor(model => model.OvertTimeId)
                           .Name("OvertimeIdMem")
                           .Placeholder("Overtime")
                           .DataTextField("OTNumber")
                           .DataValueField("Id")
                           .AutoWidth(true)
                           .HtmlAttributes(new { style = "width: 180px;" })
                           .DataSource(source =>
                                   {
                               source.Read(read =>
                               {
                                   read.Action("CmbOvertime", "TrnDTR");
                               });
                           })
                        )
                        @Html.ValidationMessageFor(model => model.OvertTimeId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.LeaveApplicationId, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                    <div class="col-sm-9">
                        @(Html.Kendo().ComboBoxFor(model => model.LeaveApplicationId)
                           .Name("LeaveApplicationIdMem")
                           .Placeholder("Leave Application")
                           .DataTextField("LANumber")
                           .DataValueField("Id")
                           .AutoWidth(true)
                           .HtmlAttributes(new { style = "width: 180px;" })
                           .DataSource(source =>
                                   {
                               source.Read(read =>
                               {
                                   read.Action("CmbLeaveApplication", "TrnDTR");
                               });
                           })
                        )
                        @Html.ValidationMessageFor(model => model.LeaveApplicationId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.ChangeShiftId, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                    <div class="col-sm-9">
                        @(Html.Kendo().ComboBoxFor(model => model.ChangeShiftId)
                           .Name("ChangeShiftIdMem")
                           .Placeholder("Change Shift")
                           .DataTextField("CSNumber")
                           .DataValueField("Id")
                           .AutoWidth(true)
                           .HtmlAttributes(new { style = "width: 180px;" })
                           .DataSource(source =>
                                   {
                               source.Read(read =>
                               {
                                   read.Action("CmbChangeShift", "TrnDTR");
                               });
                           })
                        )
                        @Html.ValidationMessageFor(model => model.ChangeShiftId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.PreparedBy, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                    <div class="col-sm-9">
                        @(Html.Kendo().ComboBoxFor(model => model.PreparedBy)
                           .Name("PreparedByMem")
                           .Placeholder("Prepared By")
                           .DataTextField("UserName")
                           .DataValueField("Id")
                           .AutoWidth(true)
                           .HtmlAttributes(new { style = "width: 280px;" })
                           .DataSource(source =>
                                   {
                               source.Read(read =>
                               {
                                   read.Action("CmbPreparedBy", "TrnDTR");
                               });
                           })
                        )
                        @Html.ValidationMessageFor(model => model.PreparedBy, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.CheckedBy, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                    <div class="col-sm-9">
                        @(Html.Kendo().ComboBoxFor(model => model.CheckedBy)
                           .Name("CheckedByMem")
                           .Placeholder("Checked By")
                           .DataTextField("UserName")
                           .DataValueField("Id")
                           .AutoWidth(true)
                           .HtmlAttributes(new { style = "width: 280px;" })
                           .DataSource(source =>
                                   {
                               source.Read(read =>
                               {
                                   read.Action("CmbPreparedBy", "TrnDTR");
                               });
                           })
                        )
                        @Html.ValidationMessageFor(model => model.CheckedBy, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.ApprovedBy, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                    <div class="col-sm-9">
                        @(Html.Kendo().ComboBoxFor(model => model.ApprovedBy)
                           .Name("ApprovedByMem")
                           .Placeholder("Approved By")
                           .DataTextField("UserName")
                           .DataValueField("Id")
                           .AutoWidth(true)
                           .HtmlAttributes(new { style = "width: 280px;" })
                           .DataSource(source =>
                                   {
                               source.Read(read =>
                               {
                                   read.Action("CmbPreparedBy", "TrnDTR");
                               });
                           })
                        )
                        @Html.ValidationMessageFor(model => model.ApprovedBy, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="row" style="padding: 10px 10px 10px 0px">
                <div class="col-md-12">
                    <div id="TrnDTRDetailSF1">
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<script>
    var dtrId = 0;
    var employees = null;
    var shiftCodes = null;
    var dayTypes = null;

    function GetParameterByName(name, url) {
        if (!url) url = window.location.href;
        name = name.replace(/[\[\]]/g, '\\$&');
        var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, ' '));
    }

    function DTRLineDataSource(dtrId)
    {
        var dataSource = new kendo.data.DataSource({
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true,
            pageSize: 5,
            schema: {
                data: "Data",
                total: "Total",
                model: {
                    id: "Id",
                    fields: {
                        Id: { editable: false },
                        DTRId: { editable: false },
                        EmployeeId: { editable: true },
                        ShiftCodeId: { editable: true },
                        Date: { editable: true, type: "date" },
                        TimeIn1: { editable: true, type: "date" },
                        TimeOut1: { editable: true, type: "date" },
                        TimeIn2: { editable: true, type: "date" },
                        TimeOut2: { editable: true, type: "date" },
                        OfficialBusiness: { editable: true, type: "boolean" },
                        OnLeave: { editable: true, type: "boolean" },
                        Absent: { editable: true, type: "boolean" },
                        HalfDayAbsent: { editable: true,type: "boolean" },
                        RegularHours: { editable: true, type: "number" },
                        NightHours: { editable: true, type: "number" },
                        OvertimeHours: { editable: true, type: "number" },
                        OvertimeNightHours: { editable: true, type: "number" },
                        GrossTotalHours: { editable: true, type: "number" },
                        TardyLateHours: { editable: true, type: "number" },
                        TardyUndertimeHours: { editable: true, type: "number" },
                        NetTotalHours: { editable: true, type: "number" },
                        DayTypeId: { editable: true },
                        RestDay: { editable: true, type: "boolean" },
                        DayMultiplier: { editable: true, type: "number" },
                        RatePerHour: { editable: true, type: "number" },
                        RatePerNightHour: { editable: true, type: "number" },
                        RatePerOvertimeHour: { editable: true, type: "number" },
                        RatePerOvertimeNightHour: { editable: true, type: "number" },
                        RegularAmount: { editable: true, type: "number" },
                        NightAmount: { editable: true, type: "number" },
                        OvertimeAmount: { editable: true, type: "number" },
                        OvertimeNightAmount: { editable: true, type: "number" },
                        TotalAmount: { editable: true, type: "number" },
                        RatePerHourTardy: { editable: true, type: "number" },
                        RatePerAbsentDay: { editable: true, type: "number" },
                        RatePerAbsentAmount: { editable: true, type: "number" },
                        NetAmount: { editable: true, type: "number" },
                    }
                }
            },
            batch: true,
            transport: {
                create: {
                    url: "@Url.Action("CreateDTRLine", "TrnDTR")?modelFilterId=" + dtrId,
                    type: "POST"
                },
                read: {
                    url: "@Url.Action("ReadDTRLines", "TrnDTR")?modelFilterId=" + dtrId,
                    contentType: "application/json",
                    type: "POST"
                },
                update: {
                    url:"@Url.Action("UpdateDTRLine", "TrnDTR")?modelFilterId=" + dtrId,
                    type: "POST"
                },
                destroy: {
                    url: "@Url.Action("DestroyDTRLine", "TrnDTR")?modelFilterId=" + dtrId,
                    type: "POST"
                },
                parameterMap: function (data, operation)
                {
                    if (operation !== "read") {
                        var result = {};

                        for (var i = 0; i < data.models.length; i++) {
                            var dtrLines = data.models[i];

                            for (var member in dtrLines) {
                                if (dtrLines.hasOwnProperty(member)) {
                                    result["models[" + i + "]." + member] = dtrLines[member];
                                }
                            }
                        }

                        return result;
                    }
                    else
                    {
                        return JSON.stringify(data);
                    }
                }
            }           
        });

        return dataSource;
    }

    function CmbEmployee(container, options)
    {
        $('<input required name="' + options.field + '"/>')
            .appendTo(container)
            .kendoDropDownList({
                autoBind: false,
                dataTextField: "FullName",
                dataValueField: "Id",
                dataSource: employees
            });
    }

    function GetEmployees(employeeId)
    {
        for (var idx = 0, length = employees.length; idx < length; idx++)
        {
            if (employees[idx].Id === employeeId)
            {
                return employees[idx].FullName;
            }
        }

        return null;
    }

    function CmbShiftCode(container, options)
    {
        $('<input required name="' + options.field + '"/>')
            .appendTo(container)
            .kendoDropDownList({
                autoBind: false,
                dataTextField: "ShiftCode",
                dataValueField: "Id",
                dataSource: shiftCodes
            });
    }

    function GetShiftCodes(shiftCodeId)
    {
        for (var idx = 0, length = shiftCodes.length; idx < length; idx++)
        {
            if (shiftCodes[idx].Id === shiftCodeId)
            {
                return shiftCodes[idx].ShiftCode;
            }
        }

        return null;
    }

    function CmbDayType(container, options)
    {
        $('<input required name="' + options.field + '"/>')
            .appendTo(container)
            .kendoDropDownList({
                autoBind: false,
                dataTextField: "DayType",
                dataValueField: "Id",
                dataSource: dayTypes
            });
    }

    function GetDaytypes(dayTypeId)
    {
        for (var idx = 0, length = dayTypes.length; idx < length; idx++)
        {
            if (dayTypes[idx].Id === dayTypeId)
            {
                return dayTypes[idx].DayType;
            }
        }

        return null;
    }

    $(document).ready(function () {
        dtrId = GetParameterByName('modelId');

        $("#TrnDTRDetailSF1").kendoGrid({
            columns: [
                {
                    command: ["destroy"],
                    title: "&nbsp;",
                    width: 110,
                    locked: true,
                    lockable: false,
                },
                {
                    width: "0px",
                    field: "Id",
                    title: "Id",
                    hidden: true
                },
                {
                    width: "0px",
                    field: "DTRId",
                    title: "DTRId",
                    hidden: true
                },
                {
                    width: 210,
                    field: "EmployeeId",
                    title: "Employee",
                    locked: true,
                    lockable: false,
                    editor: CmbEmployee,
                    template: "#=GetEmployees(EmployeeId)#"
                },
                {
                    width: 100,
                    field: "ShiftCodeId",
                    title: "Shift Code",
                    editor: CmbShiftCode,
                    template: "#=GetShiftCodes(ShiftCodeId)#"
                },
                {
                    width: 100,
                    field: "Date",
                    title: "Date",
                    format: "{0:MM/dd/yyyy}"
                },
                {
                    title: "Day",
                    columns: [{
                        width: 100,
                        field: "DayTypeId",
                        title: "Type",
                        editor: CmbDayType,
                        template: "#=GetDaytypes(DayTypeId)#"
                    },
                    {
                        width: 100,
                        field: "DayMultiplier",
                        title: "DM",
                        format: "{0:N2}"
                    }]
                },
                {
                    width: 100,
                    field: "RestDay",
                    title: "RD",
                    template: "<input type=\"checkbox\" #= RestDay ? \"checked=checked\" : \"\" # disabled=\"disabled\"></input>",
                },
                {
                    width: 100,
                    field: "TimeIn1",
                    title: "TimeIn1",
                    type: "date",
                    format: "{0:MM/dd/yyyy}"
                },
                {
                    width: 100,
                    field: "TimeOut1",
                    title: "TimeOut1",
                    type: "date",
                    format: "{0:MM/dd/yyyy}"
                },
                {
                    width: 100,
                    field: "TimeIn2",
                    title: "TimeIn2",
                    type: "date",
                    format: "{0:MM/dd/yyyy}"
                },
                {
                    width: 100,
                    field: "TimeOut2",
                    title: "TimeOut2",
                    type: "date",
                    format: "{0:MM/dd/yyyy}"
                },
                {
                    title: "DTR Status",
                    columns: [{
                        width: 70,
                        field: "OfficialBusiness",
                        title: "OB",
                        template: "<input type=\"checkbox\" #= OfficialBusiness ? \"checked=checked\" : \"\" # disabled=\"disabled\"></input>",
                    },
                    {
                        width: 70,
                        field: "OnLeave",
                        title: "OL",
                        template: "<input type=\"checkbox\" #= OnLeave ? \"checked=checked\" : \"\" # disabled=\"disabled\"></input>",
                    },
                    {
                        width: 70,
                        field: "Absent",
                        title: "A",
                        template: "<input type=\"checkbox\" #= Absent ? \"checked=checked\" : \"\" # disabled=\"disabled\"></input>",
                    },
                    {
                        width: 70,
                        field: "HalfdayAbsent",
                        title: "HA",
                        template: "<input type=\"checkbox\" #= HalfdayAbsent ? \"checked=checked\" : \"\" # disabled=\"disabled\"></input>",
                    }]
                },
                {
                    title: "Work Hours",
                    columns: [{
                        width: 100,
                        field: "RegularHours",
                        title: "Reg",
                        format: "{0:N2}"
                    },
                    {
                        width: 100,
                        field: "NightHours",
                        title: "N",
                        format: "{0:N2}"
                    },
                    {
                        width: 100,
                        field: "OvertimeHours",
                        title: "OT",
                        format: "{0:N2}"
                    },
                    {
                        width: 100,
                        field: "OvertimeNightHours",
                        title: "OTN",
                        format: "{0:N2}"
                    },
                    {
                        width: 100,
                        field: "GrossTotalHours",
                        title: "Total",
                        format: "{0:N2}"
                    }]
                },
                {
                    title: "Tardy Hours",
                    columns: [{
                        width: 100,
                        field: "TardyLateHours",
                        title: "Late",
                        format: "{0:N2}"
                    },
                    {
                        width: 100,
                        field: "TardyUndertimeHours",
                        title: "UT",
                        format: "{0:N2}"
                    }]
                },
                {
                    width: 100,
                    field: "NetTotalHours",
                    title: "Net Hours",
                    format: "{0:N2}"
                },
                {
                    title: "Rate per Hour",
                    columns: [{
                        width: 100,
                        field: "RatePerHour",
                        title: "Reg",
                        format: "{0:N2}"
                    },
                    {
                        width: 100,
                        field: "RatePerNightHour",
                        title: "N",
                        format: "{0:N2}"
                    },
                    {
                        width: 100,
                        field: "RatePerOvertimeHour",
                        title: "OT",
                        format: "{0:N2}"
                    },
                    {
                        width: 100,
                        field: "RatePerOvertimeNightHour",
                        title: "OTN",
                        format: "{0:N2}"
                    }]
                },
                {
                    title: "Amount",
                    columns: [{
                        width: 100,
                        field: "RegularAmount",
                        title: "Reg",
                        format: "{0:N2}"
                    },
                    {
                        width: 100,
                        field: "NightAmount",
                        title: "N",
                        format: "{0:N2}"
                    },
                    {
                        width: 100,
                        field: "OvertimeAmount",
                        title: "OT",
                        format: "{0:N2}"
                    },
                    {
                        width: 100,
                        field: "OvertimeNightAmount",
                        title: "OTN",
                        format: "{0:N2}"
                    }]
                },
                {
                    width: 100,
                    field: "TotalAmount",
                    title: "Ttl Amt",
                    format: "{0:N2}"
                },
                {
                    width: 100,
                    field: "RatePerHourTardy",
                    title: "Tardy RPH",
                    format: "{0:N2}"
                },
                {
                    width: 100,
                    field: "TardyAmount",
                    title: "Tardy Amt",
                    format: "{0:N2}"
                },
                {
                    width: 100,
                    field: "RatePerAbsentDay",
                    title: "Abs RPD",
                    format: "{0:N2}"
                },
                {
                    width: 100,
                    field: "AbsentAmount",
                    title: "Abs Amt",
                    format: "{0:N2}"
                },
                {
                    width: 100,
                    field: "NetAmount",
                    title: "Net Amt",
                    format: "{0:N2}"
                }
            ],
            editable: true,
            pageable: true,
            sortable: true,
            scrollable: {
                virtual: true
            },
            toolbar: ["create", "save", "cancel"],
            dataBound: function(e){
              $('.k-grid-add').unbind("click");

              $('.k-grid-add').bind("click", function(){
                  ReloadPage();
              });
            },
            dataSource: DTRLineDataSource(dtrId)
        });

        $.ajax({
            url: "@Url.Action("CmbEmployee", "TrnDTR")",
            type: "GET",
            async: false,
            contentType: "application/json",
            success: function(data) {
                employees = data;
            }
        });

        $.ajax({
            url: "@Url.Action("CmbShiftCodes", "TrnDTR")",
            type: "GET",
            async: false,
            contentType: "application/json",
            success: function(data) {
                shiftCodes = data;
            }
        });

        $.ajax({
            url: "@Url.Action("CmbDaytype", "TrnDTR")",
            type: "GET",
            async: false,
            contentType: "application/json",
            success: function(data) {
                dayTypes = data;
            }
        });
    });
</script>

